#!/bin/tcsh
#
# if you want to debug this file then pass "-x" to line 1
#
set SCHED=SLURM
#
#    ===== next section parses arguments
#
#    anything not recognized is taken as the input file name.
#
while ($#argv > 0)
   set val=$argv[1]
   shift
   switch ($val)
      case -y:
        set OVERWRITE=true
        breaksw
      case -mpi:
        set TARGET=mpi
        breaksw
      case -ga:
        set TARGET=ga
        breaksw
      case -sockets:
        set TARGET=sockets
        breaksw
      case -q:
        set PARTITION=$argv[1]
        shift
        breaksw
      case -l:
        set LOGFILE=$argv[1]
        shift
        breaksw
      case -p:
        set NCPUS=$argv[1]
        shift
        breaksw
      case -w:
        set WALL=$argv[1]
        shift
        breaksw
      case -exclusive:
        set EXCLUSIVE=true
        breaksw
      case -ppn:
        set PPN=$argv[1]
        shift
        breaksw
      case -ccmem:
        set CCMEM=$argv[1]
        shift
        breaksw
#            next two specify GAMESS binary's "version number" and pathname
      case -v:
        set VERNO=$argv[1]
        shift
        breaksw
      case -exepath:
        set XPATH=$argv[1]
        shift
        breaksw
      case -restart:
        set RESTARTPATH=$argv[1]
        shift
        breaksw
#             next four are special file saving/reuse options.
      case -b:
        set EXTBAS=$argv[1]
        shift
        breaksw
      default:
        if ($?JOB == 1) then
           echo You\'ve given too many input file names, $JOB and $val.
           exit 4
        else
           set JOB=$val
           if ($JOB =~ *.inp) set JOB=$JOB:r
           set inputfilename=`basename $JOB.inp`
           if ($inputfilename =~ *.inp) set inputfilename=$inputfilename:r
           if ($JOB == $inputfilename) set JOB=`pwd`/$JOB
        endif
        breaksw
   endsw
end
#
#     Global Arrays usage by GAMESS+LIBCCHEM requires running one MPI
#     process per node: parallelism inside node is always by threads.
#
#       MWS has to pick a version number
if ($?JOB == 0)         set JOB=help
if ($?VERNO == 0)       set VERNO=00
if ($?LOGFILE == 0)     set LOGFILE=default
if ($?XPATH == 0)       set XPATH=`pwd`
if ($?RESTARTPATH == 0) set RESTARTPATH=$HOME/restart
if ($?NCPUS == 0)       set NCPUS=1
if ($?WALL == 0)        set WALL=default
if ($?EXCLUSIVE == 0)   set EXCLUSIVE=false
if ($?TESTJOB == 0)     set TESTJOB=false
if ($?PPN == 0)         set PPN=$NCPUS
if ($?EXTBAS == 0)      set EXTBAS=/dev/null
if ($?CCMEM == 0)       set CCMEM=0
if ($?PARTITION == 0)   set PARTITION=compute
if ($?TARGET == 0)      set TARGET=sockets
if ($?OVERWRITE == 0)   set OVERWRITE=false

set OLDJOB=$JOB
set LONGJOBNAME=`echo $OLDJOB | sed "s/\//_/g"`
set NEWJOB=`echo $JOB | rev | cut -d'/' -f 1 | rev`
set JOB=$NEWJOB
#
#    ===== next section provides some help screens, which exit.
#
if ($JOB == help) then
   tput clear

   echo " "
   echo "   ÛÛÛÛÛÛÛÛÛ    ÛÛÛÛÛÛÛÛÛ   ÛÛÛÛÛÛ   ÛÛÛÛÛÛ ÛÛÛÛÛÛÛÛÛÛ  ÛÛÛÛÛÛÛÛÛ   ÛÛÛÛÛÛÛÛÛ "
   echo "  ÛÛÛ°°°°°ÛÛÛ  ÛÛÛ°°°°°ÛÛÛ °°ÛÛÛÛÛÛ ÛÛÛÛÛÛ °°ÛÛÛ°°°°°Û ÛÛÛ°°°°°ÛÛÛ ÛÛÛ°°°°°ÛÛÛ"
   echo " ÛÛÛ     °°°  °ÛÛÛ    °ÛÛÛ  °ÛÛÛ°ÛÛÛÛÛ°ÛÛÛ  °ÛÛÛ  Û ° °ÛÛÛ    °°° °ÛÛÛ    °°° "
   echo "°ÛÛÛ          °ÛÛÛÛÛÛÛÛÛÛÛ  °ÛÛÛ°°ÛÛÛ °ÛÛÛ  °ÛÛÛÛÛÛ   °°ÛÛÛÛÛÛÛÛÛ °°ÛÛÛÛÛÛÛÛÛ "
   echo "°ÛÛÛ    ÛÛÛÛÛ °ÛÛÛ°°°°°ÛÛÛ  °ÛÛÛ °°°  °ÛÛÛ  °ÛÛÛ°°Û    °°°°°°°°ÛÛÛ °°°°°°°°ÛÛÛ"
   echo "°°ÛÛÛ  °°ÛÛÛ  °ÛÛÛ    °ÛÛÛ  °ÛÛÛ      °ÛÛÛ  °ÛÛÛ °   Û ÛÛÛ    °ÛÛÛ ÛÛÛ    °ÛÛÛ"
   echo " °°ÛÛÛÛÛÛÛÛÛ  ÛÛÛÛÛ   ÛÛÛÛÛ ÛÛÛÛÛ     ÛÛÛÛÛ ÛÛÛÛÛÛÛÛÛÛ°°ÛÛÛÛÛÛÛÛÛ °°ÛÛÛÛÛÛÛÛÛ "
   echo "   °°°°°°°°°  °°°°°   °°°°° °°°°°     °°°°° °°°°°°°°°°  °°°°°°°°°   °°°°°°°°° "
   echo "The syntax to execute GAMESS is"
   echo " "
   echo "   gms.interactive [-l logfile] [-p CPUS] [-w dd:hh:mm:ss] [input]"
   echo " "
   echo "   -l        gives the log file name."
   echo "   -p X      will run X compute processes."
   echo "   -ppn Y    run only Y compute processes in each node."
   echo "   -exepath  full absolute path to the folder containing GAMESS executable"
   echo "             and rungms.interactive script"
   echo "   -restart  full absolute path to the restart folder"
   echo "   -q        partition name passed to --partition, e.g. k20"
   echo "             ------------------------------------------------"
   echo "             queue names - description"
   echo "             ------------------------------------------------"
   echo "             compute     - any computing node that fits -ppn"
   echo "             k20         - sandybridge + nvidia k20 gpu"
   echo "             k40         - sandybridge + nvidia k40 gpu"
   echo "             k80         - sandybridge + nvidia k80 gpu"
   echo "             amd         - epyc 2 x 32 core (64 cores)"
   echo "             haswell     - haswell 2 x 18 core (36 cores)"
   echo " "
   echo "   -w        wall clock time, as dd:hh:mm:ss (default=24:00:00=24 hrs)"
   echo "   -mpi      alters rungms.interactive for an MPI job"
   echo "   -sockets  alters rungms.interactive for an sockets job (default)"
   echo " "
   exit
endif
#
#    ===== next section selects scheduler and cluster independent options
#
#  we must have a name for the output from the run:
#
if ($LOGFILE == default) then
   set LOGFILE=$JOB.log
   echo -n "output file name? [$LOGFILE] "
   set LOGFILE=`pwd`/$JOB.log
   set ans=$<
   if (null$ans != null) set LOGFILE=$ans
endif
#
if (-e $LOGFILE) then
   if ($OVERWRITE == false) then
     echo -n "$LOGFILE already exists.  OK to delete the old one? [y] "
     set ans=$<
     if (null$ans == null) set ans=y
     if ($ans == y) then
       rm $LOGFILE
     else
       echo "Exiting, so you can think about your old log file's value."
       exit
     endif
   else
     echo "OVERWRITE MODE! Removing existing log file $LOGFILE"
     rm $LOGFILE
   endif 
endif
#
#  we must know how many cores (NCPUS) to run on:
#
if ($NCPUS == 0) then
   echo -n "number of cores to use ? [$NCPUS] "
   set ans=$<
   if (null$ans != null) set NCPUS=$ans
endif
#
if ($NCPUS < $PPN) then
   set NNODES=1
   set WHOLENODE=true
else
#     jobs running more than one node come here, to ensure the
#     the core count is rounded down to multiple of PPN.
#        gms -p 50 -ppn 6   will produce NCPUS=48, NNODES=8, PPN=6
   @ xx = $NCPUS / $PPN
   @ yy = $PPN * $xx
   set NCPUS=$yy
   set NNODES=$xx
   set WHOLENODE=true
endif

unset xx
unset yy
#
#  we must know the wall clock time limit:
#
if ($WALL == default) then
   set WALL=24:00:00
endif
#
#    ===== next section selects scheduler and cluster dependent options
#
if ($SCHED == SLURM) then
    if ($NCPUS < $PPN) set PPN=$NCPUS
endif
#
set USERSCR=$RESTARTPATH
if (-d $USERSCR) then
else
  echo An empty $USERSCR directory is being created for you...
  mkdir -p $USERSCR
  if (-d $USERSCR) then
    echo "This directory will receive .dat, .trj, .rst supplemental outputs."
    sleep 1
  else
    echo "Problem creating $USERSCR, no job can be submitted."
    exit
  endif
endif
echo Checking for existence of various files
#
#    ===== next section tests existence of various files
#
#    next directory on head node is the usual place to leave all
#    supplemental ASCII outputs, such as PUNCH or TRAJECT files.
#
#    MWS had to change this to avoid head node NFS issues.
#
#    we should make sure the input exists, and that we don't
#    destroy any files from previous runs that might be useful.
#
set nerr=0
#
if (-e $OLDJOB.inp) then
else
   echo I could not find $JOB.inp in your current directory.
   exit 1
endif
#

echo $USERSCR

if (-e $USERSCR/$JOB.dat) then
   echo You presently have a PUNCH file named $USERSCR/$JOB.dat,
   rm -rf $USERSCR/$JOB.dat
endif
#
if (-e $USERSCR/$JOB.trj) then
   echo You presently have a TRAJECT file named $USERSCR/$JOB.trj,
   rm -rf $USERSCR/$JOB.trj
endif
#
if (-e  $USERSCR/$JOB.rst) then
   echo You presently have a RESTART file named $USERSCR/$JOB.rst,
   rm -rf $USERSCR/$JOB.rst
endif
#
if (-e $USERSCR/$JOB.efp) then
   echo You presently have a MAKEFP file named $USERSCR/$JOB.efp,
   rm -rf $USERSCR/$JOB.efp
endif
#
#    ===== next section prepares the job script
#
cp $XPATH/rungms.interactive $USERSCR/$LONGJOBNAME.script
#
#    special option to execute test version, rather than production code
#
if ($XPATH != none) then
   sed -e \\+currentdir=\`pwd\`+s++currentdir=$XPATH+ \
      $USERSCR/$LONGJOBNAME.script > $USERSCR/$JOB.mung
   mv $USERSCR/$JOB.mung $USERSCR/$LONGJOBNAME.script
endif
#
#    special option to hack in the desired node memory for LIBCCHEM,
#    this option is irrelevant to a normal GAMESS binary.
#
if ($CCMEM != 0) then
   sed -e /memory=6g/s//memory=$CCMEM/ \
      $USERSCR/$LONGJOBNAME.script > $USERSCR/$JOB.mung
   mv $USERSCR/$JOB.mung $USERSCR/$LONGJOBNAME.script
endif
#
#    special option to read user-specified external basis set library
#
if ($EXTBAS != /dev/null) then
   if (-e $EXTBAS) then
      sed -e \\+EXTBAS\ /dev/null+s++EXTBAS\ $EXTBAS+ \
         $USERSCR/$LONGJOBNAME.script > $USERSCR/$JOB.mung
      mv $USERSCR/$JOB.mung $USERSCR/$LONGJOBNAME.script
   else
      echo Your external basis set file $EXTBAS does not exist.
      echo Please provide the correct fully qualified path name to this file.
      exit 8
   endif
endif
#
#    ===== last section actually submits the run
#
echo Submitting GAMESS job $JOB.inp using $NCPUS cores...
set FIRST=`echo $JOB | cut -b 1-1`
set FIRST=`echo $FIRST | tr '0-9' '[Q*]'`
set JOBNAME=$FIRST`echo $JOB | cut -b 2-15`
set EXTRAOPTIONS="--chdir=$XPATH"
if ($EXCLUSIVE == true) set EXTRAOPTIONS="$EXTRAOPTIONS --exclusive"
if ($PARTITION != none) set EXTRAOPTIONS="$EXTRAOPTIONS --partition=$PARTITION"
#
if ($SCHED == SLURM) then
   sed -i "s|#OVERRIDE INPUT|set INPUT=$OLDJOB\.inp|g" $USERSCR/$LONGJOBNAME.script
   sed -i "s|#OVERRIDE VERNO|set VERNO=$VERNO|g" $USERSCR/$LONGJOBNAME.script
   sed -i "s|#OVERRIDE NCPUS|set NCPUS=$NCPUS|g" $USERSCR/$LONGJOBNAME.script
   sed -i "s|#OVERRIDE PPN|set PPN=$PPN|g" $USERSCR/$LONGJOBNAME.script
   sed -i "s|#OVERRIDE TARGET|set TARGET=$TARGET|g" $USERSCR/$LONGJOBNAME.script
   chmod 755 $USERSCR/$LONGJOBNAME.script
   #
   echo "#\!/bin/csh"                         > $USERSCR/$LONGJOBNAME.slurmjob
   echo "$USERSCR/$LONGJOBNAME.script >& $LOGFILE"   >> $USERSCR/$LONGJOBNAME.slurmjob
   #
   sbatch -o $LOGFILE --no-requeue --job-name=$JOBNAME \
          --nodes=$NNODES --time=$WALL --ntasks-per-node=$PPN \
          $EXTRAOPTIONS \
          $USERSCR/$LONGJOBNAME.slurmjob
   unset echo
#   rm $USERSCR/$LONGJOBNAME.slurmjob
endif
#
exit
