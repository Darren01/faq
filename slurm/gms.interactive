#!/bin/tcsh
set GROUP=quantum
set MYGROUPFOLDER=sarom-ssok1
set CURRENTDIR=`pwd`
echo CURRENT DIRECTORY IS: $CURRENTDIR

#Cluster specifics
set SCHED=SLURM
set CLUSTER=CyEnce
set PPN_MAX=16
#
#    ===== next section parses arguments
#
#    anything not recognized is taken as the input file name.
#
while ($#argv > 0)
   set val=$argv[1]
   shift
   switch ($val)
      case -mpi:
        set TARGET=mpi
        breaksw
      case -sockets:
        set TARGET=sockets
        breaksw
      case -q:
  set PARTITION=$argv[1]
        shift
  breaksw
      case -l:
        set LOGFILE=$argv[1]
        shift
        breaksw
      case -p:
        set NCPUS=$argv[1]
        shift
        breaksw
      case -w:
        set WALL=$argv[1]
        shift
        breaksw
      case -hog:
        set HOG=true
        breaksw
      case -ppn:
        set PPN=$argv[1]
        shift
        breaksw
      case -ccmem:
        set CCMEM=$argv[1]
        shift
        breaksw
#            next two specify GAMESS binary's "version number" and pathname
      case -v:
        set VERNO=$argv[1]
        shift
        breaksw
      case -exepath:
        set XPATH=$argv[1]
        shift
        breaksw
#             next four are special file saving/reuse options.
      case -b:
        set EXTBAS=$argv[1]
        shift
        breaksw
      case -save30:
        set SAVE30=true
        breaksw
      case -file37:
        set FILE37=$argv[1]
        set FILE12=$FILE37:r.civec
        shift
        set SAVE37=true
        breaksw
      case -file70:
        set FILE70=$argv[1]
        shift
        set SAVE70=true
        breaksw
      default:
        if ($?JOB == 1) then
           echo You\'ve given too many input file names, $JOB and $val.
           exit 4
        else
           set JOB=$val
           if ($JOB =~ *.inp) set JOB=$JOB:r
        endif
        breaksw
   endsw
end
#
#     Global Arrays usage by GAMESS+LIBCCHEM requires running one MPI
#     process per node: parallelism inside node is always by threads.
#
#       MWS has to pick a version number
if ($?JOB == 0)       set JOB=help
if ($?VERNO == 0)     set VERNO=00
if ($?LOGFILE == 0)   set LOGFILE=default
if ($?XPATH == 0)     set XPATH=`pwd`
if ($?NCPUS == 0)     set NCPUS=0
if ($?WALL == 0)      set WALL=default
if ($?HOG == 0)       set HOG=false
if ($?TESTJOB == 0)   set TESTJOB=false
if ($?PPN == 0)       set PPN=$PPN_MAX
if ($?EXTBAS == 0)    set EXTBAS=/dev/null
if ($?SAVE30 == 0)    set SAVE30=false
if ($?SAVE37 == 0)    set SAVE37=false
if ($?SAVE70 == 0)    set SAVE70=false
if ($?CCMEM == 0)     set CCMEM=0
if ($?PARTITION == 0) set PARTITION=none
if ($?TARGET == 0)    set TARGET=sockets

set OLDJOB=$JOB
set NEWJOB=`echo $JOB | rev | cut -d'/' -f 1 | rev`
set JOB=$NEWJOB

#
#    ===== next section provides some help screens, which exit.
#
if ($JOB == help) then
   tput clear
   echo "The syntax to execute GAMESS is"
   echo "     gms [-l logfile] [-p CPUS] [-w dd:hh:mm:ss] jjj"
   echo "where jjj is the name of your jjj.inp file, and"
   echo "   -l        gives the log file name."
   echo "   -p X      will run X compute processes.  If X exceeds the number"
   echo "             of cores per node in this cluster ($PPN_MAX), then"
   echo "             X will be rounded downward to a multiple of $PPN_MAX,"
   echo "             or rounded to a multiple of Y, if -ppn is selected."
   echo "   -ppn Y    run only Y compute processes in each node.  Of course,"
   echo "             Y cannot exceed this cluster's core/node count, $PPN_MAX."
   echo "   -w        wall clock time, as dd:hh:mm:ss (default=12:00:00=12 hrs)"
   echo "   -mpi      alters rungms.interactive for an MPI job"
   echo "   -sockets  alters rungms.interactive for an sockets job (default)"
   echo " "
   echo "Other options, including GPU flags, can be displayed by 'gms -help'."
   echo "This cluster's hardware can be displayed by 'gms -cluster'."
   exit
endif
#
#    ===== next section selects scheduler and cluster independent options
#
#  we must have a name for the output from the run:
#
if ($LOGFILE == default) then
   set LOGFILE=$JOB.log
   echo -n "output file name? [$LOGFILE] "
   set ans=$<
   if (null$ans != null) set LOGFILE=$ans
endif
#
if (-e $LOGFILE) then
   echo -n "$LOGFILE already exists.  OK to delete the old one? [y] "
   set ans=$<
   if (null$ans == null) set ans=y
   if ($ans == y) then
      rm $LOGFILE
   else
      echo "Exiting, so you can think about your old log file's value."
      exit
   endif
endif
#
#  we must know how many cores (NCPUS) to run on:
#
if ($NCPUS == 0) then
   set NCPUS=$PPN_MAX
   echo -n "number of cores to use ? [$NCPUS] "
   set ans=$<
   if (null$ans != null) set NCPUS=$ans
endif
#
if ($PPN > $PPN_MAX) then
   echo "This cluster has $PPN_MAX core nodes, so -ppn cannot request more"
   echo "than $PPN_MAX processors per node."
   exit
endif
#
if ($NCPUS < $PPN) then
   set NNODES=1
   set WHOLENODE=true
else
#     jobs running more than one node come here, to ensure the
#     the core count is rounded down to multiple of PPN.
#        gms -p 50 -ppn 6   will produce NCPUS=48, NNODES=8, PPN=6
   @ xx = $NCPUS / $PPN
   @ yy = $PPN * $xx
   set NCPUS=$yy
   set NNODES=$xx
   set WHOLENODE=true
endif

unset xx
unset yy
#
#  we must know the wall clock time limit:
#
if ($WALL == default) then
   set WALL=24:00:00
endif
#
if ($SCHED == SGE) then
 set time=(`echo $WALL | cut --delimiter=: --output-delimiter=' ' --fields 1-`)
 set ntime=$#time
 switch ($ntime)
  case 4:
    @ seconds = 86400 * $time[1] + 3600 * $time[2] + 60 * $time[3] + $time[4]
    breaksw
  case 3:
    @ seconds =                    3600 * $time[1] + 60 * $time[2] + $time[3]
    breaksw
  case 2:
    @ seconds =                                      60 * $time[1] + $time[2]
    breaksw
  case 1:
    @ seconds =                                                      $time[1]
    breaksw
  default
    echo Something is wrong with this time specifier: $WALL
    echo Please enter only colon separated wall clock times,
    echo any of    ss  or  mm:ss  or  hh:mm:ss  or  dd:hh:mm:ss is OK.
    exit
 endsw
endif
#
#    ===== next section selects scheduler and cluster dependent options
#
if ($SCHED == SLURM) then
    if ($NCPUS < $PPN) set PPN=$NCPUS
endif
#
#  A cluster with 8-core nodes and very slow disks should
#  try to encourage the use of AO integral direct options.
#
if ($CLUSTER == dynamo) then
                   set ndir = `grep -i "dirscf=.true." $JOB.inp | wc -l`
   if ($ndir == 0) set ndir = `grep -i "dirscf=.t."    $JOB.inp | wc -l`
   if ($ndir == 0) set ndir = `grep -i "dirtrf=.true." $JOB.inp | wc -l`
   if ($ndir == 0) set ndir = `grep -i "dirtrf=.t."    $JOB.inp | wc -l`
   if ($ndir == 0) then
      echo "   Your job does not contain a DIRSCF or DIRTRF keyword."
      echo "   The dynamo cluster is based on SATA quality disks, which"
      echo "   are shared by eight (8) cores.  You probably will get"
      echo "   better wall clock times if you go AO integral direct."
   endif
#       likewise, the run shouldn't be excessively long.
   if ($seconds > 604800) then
     echo Please request no more than 7 wall clock days.
     exit
   endif
endif
#
echo "switch ($CLUSTER)"
switch ($CLUSTER)
   case CyEnce:
      set USERSCR=/work/$GROUP/$MYGROUPFOLDER/restart
      if (-d $USERSCR) then
      else
        echo An empty $USERSCR directory is being created for you...
        mkdir -p $USERSCR
        if (-d $USERSCR) then
          echo This directory will receive .dat, .trj, .rst supplemental outputs.
          sleep 1
        else
          echo Problem creating $USERSCR, no job can be submitted.
          exit
        endif
      endif
      breaksw
endsw
echo Checking for existence of various files
#
#    ===== next section tests existence of various files
#
#    next directory on head node is the usual place to leave all
#    supplemental ASCII outputs, such as PUNCH or TRAJECT files.
#
#    MWS had to change this to avoid head node NFS issues.
#
#    we should make sure the input exists, and that we don't
#    destroy any files from previous runs that might be useful.
#
set nerr=0
#
if ((-e $OLDJOB.inp) || (-e tests/$JOB.inp) || (-e tests/standard/$JOB.inp)) then
else
   echo I could not find $JOB.inp in your current directory.
   @ nerr++
endif
#
if (-e /work/quantum/$MYGROUPFOLDER/restart/$JOB.dat) then
   echo You presently have a PUNCH file named $USERSCR/$JOB.dat,
   rm -rf /work/quantum/$MYGROUPFOLDER/restart/$JOB.dat
endif
#
if (-e /work/quantum/$MYGROUPFOLDER/restart/$JOB.trj) then
   echo You presently have a TRAJECT file named $USERSCR/$JOB.trj,
   rm -rf /work/quantum/$MYGROUPFOLDER/restart/$JOB.trj
endif
#
if (-e  /work/quantum/$MYGROUPFOLDER/restart/$JOB.rst) then
   echo You presently have a RESTART file named $USERSCR/$JOB.rst,
   rm -rf /work/quantum/$MYGROUPFOLDER/restart/$JOB.rst
endif
#
if (-e /work/quantum/$MYGROUPFOLDER/restart/$JOB.efp) then
   echo You presently have a MAKEFP file named $USERSCR/$JOB.efp,
   rm -rf /work/quantum/$MYGROUPFOLDER/restart/$JOB.efp
endif
#
#    ===== next section prepares the job script
#
switch ($CLUSTER)
  case CyEnce:
     cp $XPATH/rungms.interactive $USERSCR/$JOB.script
     breaksw
  default:
     echo "front end gms script cannot locate the back-end rungms script..."
     exit 4
     breaksw
endsw
#
#    special option to execute test version, rather than production code
#
if ($XPATH != none) then
   sed -e \\+/home/mike/gamess+s++$XPATH+ \
      $USERSCR/$JOB.script > $USERSCR/$JOB.mung
   mv $USERSCR/$JOB.mung $USERSCR/$JOB.script
endif
#
#    special option to hack in the desired node memory for LIBCCHEM,
#    this option is irrelevant to a normal GAMESS binary.
#
if ($CCMEM != 0) then
   sed -e /memory=6g/s//memory=$CCMEM/ \
      $USERSCR/$JOB.script > $USERSCR/$JOB.mung
   mv $USERSCR/$JOB.mung $USERSCR/$JOB.script
endif
#
#    special option to read user-specified external basis set library
#
if ($EXTBAS != /dev/null) then
   if (-e $EXTBAS) then
      sed -e \\+EXTBAS\ /dev/null+s++EXTBAS\ $EXTBAS+ \
         $USERSCR/$JOB.script > $USERSCR/$JOB.mung
      mv $USERSCR/$JOB.mung $USERSCR/$JOB.script
   else
      echo Your external basis set file $EXTBAS does not exist.
      echo Please provide the correct fully qualified path name to this file.
      exit 8
   endif
endif
#
#    special option to save/reuse DAFL30 for spin-orbit coupling runs
#
if ($SAVE30 == true) then
   sed -e /JOB.F30/s//JOB.dafl30/ \
      $USERSCR/$JOB.script > $USERSCR/$JOB.mung
   mv $USERSCR/$JOB.mung $USERSCR/$JOB.script
endif
#
#    special option to save/reuse GCILIST for general CI calculations
#    we can't test its existence as this might be the run that creates it.
#
if ($SAVE37 == true) then
   sed -e \\+\$SCR/\$JOB.F12+s++$FILE12+ \
       -e \\+\$SCR/\$JOB.F37+s++$FILE37+ \
      $USERSCR/$JOB.script > $USERSCR/$JOB.mung
   mv $USERSCR/$JOB.mung $USERSCR/$JOB.script
endif
#
#    special option to save/reuse CCREST or AMPROCC, for CC restarts
#    we can't test its existence as this might be the run that creates it.
#
if ($SAVE70 == true) then
   sed -e \\+\$SCR/\$JOB.F70+s++$FILE70+ \
      $USERSCR/$JOB.script > $USERSCR/$JOB.mung
   mv $USERSCR/$JOB.mung $USERSCR/$JOB.script
endif
#
#    ===== last section actually submits the run
#
echo Submitting GAMESS job $JOB.inp using $NCPUS cores...
#
#    ensure we have a job name that does not begin with a number,
#    and does not exceed 15 bytes.
#
set FIRST=`echo $JOB | cut -b 1-1`
set FIRST=`echo $FIRST | tr '0-9' '[Q*]'`
set JOBNAME=$FIRST`echo $JOB | cut -b 2-15`
#
if ($SCHED == SLURM) then
   sed -e /INPUT=\$1/s//INPUT=$JOB/      \
       -e /VERNO=\$2/s//VERNO=$VERNO/    \
       -e /NCPUS=\$3/s//NCPUS=$NCPUS/    \
       -e /PPN=\$4/s//PPN=$PPN/          \
       -e /\#OVERRIDE\ TARGET/s//set\ TARGET=$TARGET/ \
           $USERSCR/$JOB.script > $USERSCR/$JOB.mung
   sed -i "s|#OVERRIDE USERSCR|set USERSCR=$USERSCR|g" $USERSCR/$JOB.mung
   mv $USERSCR/$JOB.mung $USERSCR/$JOB.script
   chmod 755 $USERSCR/$JOB.script
   #
   echo "#\!/bin/csh"                         > $USERSCR/$JOB.slurmjob
   echo "$USERSCR/$JOB.script >& $LOGFILE"   >> $USERSCR/$JOB.slurmjob
  #echo "rm -f $USERSCR/$JOB.script"         >> $USERSCR/$JOB.slurmjob
   #

    if ($PARTITION != none) then
      set echo
      sbatch -o $LOGFILE --no-requeue --job-name=$JOBNAME \
             --nodes=$NNODES --time=$WALL --ntasks-per-node=$PPN_MAX \
             --partition=$PARTITION $USERSCR/$JOB.slurmjob
      unset echo
    else
      set echo
      sbatch -o $LOGFILE --no-requeue --job-name=$JOBNAME \
             --nodes=$NNODES --time=$WALL --ntasks-per-node=$PPN_MAX \
             $USERSCR/$JOB.slurmjob
      unset echo
    endif
    sleep 2
#   rm $USERSCR/$JOB.slurmjob
endif
#
exit
